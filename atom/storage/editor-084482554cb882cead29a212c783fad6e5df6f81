{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Volumes/overblog/public_html/OverblogAdmin","buffers":[{"text":"<?php\n\n/**\n * Support FrontController Class\n *\n * @package Admin\n */\n\nnamespace OverblogAdmin\\FrontBundle\\Controller;\n\nuse OverblogAdmin\\FrontBundle\\Controller\\HtmlController;\nuse Overblog\\CommonBundle\\HttpFoundation\\JsonRPCResponse;\n\n/**\n * Bill FrontController Class\n *\n * @package Admin\n * @subpackage Front\n */\nclass ContractController extends HtmlController\n{\n    CONST DEFAULT_LANG = 'en';\n    CONST CONTRACT_AUTHOR = 'author';\n    CONST CONTRACT_PARTNER = 'partner';\n\n    /**\n     * viewAction\n     * Return a final contract\n     *\n     * @param id int PDA Id\n     * @author Gerald LONLAS <gerald@overblog.com>\n     */\n    public function viewAction($id)\n    {\n        $u = $this\n            ->get('overblog.modelclient.factory')\n            ->get('AuthenticatedUser');\n\n         if (!$u->checkRolesOnBlog(\n                $id,\n                'UROLE_BLOG_OWNER',\n                true\n            ))\n        {\n            return $this->_error(\n                '403',\n                'access denied'\n            );\n        }\n\n        try\n        {\n            // Get PDA\n            $pda = $this->_getPda($id);\n\n            // Get blog attached to this PDA\n            $blog = $this->_getBlog($id);\n\n            // Get Profile data attached to this PDA\n            $profile = $this->_getProfile($id);\n\n            // Get User lang (fr, en, de, it, es, ...)\n            $lang = $this->_getLang($blog);\n\n            // Get Contract type (aka Author or Partner)\n            $contractType = $this->_getContratType(\n                $profile->asObject()->profile\n            );\n\n            // Contract rendering\n            return $this->render(\n                'OverblogAdminFrontBundle:Contracts:contract_'. $lang .'_'. $contractType .'.html.twig',\n                [\n                    'pda'                 => $pda->asObject(),\n                    'profile'             => $this->_getRightProfile($profile->asObject()),\n                    'legalRepresentative' => $profile->asObject()->legal,\n                    'blog'                => $blog->asObject(),\n                    'dateFormat'          => $this->_getDateFormat($lang)\n                ]\n            );\n        }\n        catch(\\Exception $e)\n        {\n            return $this->_error(\n                '500',\n                'internal server error'\n            );\n        }\n    }\n    /**\n     * previewAction\n     * Return contract preview\n     *\n     * @throws \\Exception\n     * @return \\Symfony\\Component\\HttpFoundation\\Response|\\Overblog\\CommonBundle\\HttpFoundation\\JsonRPCResponse\n     */\n    public function previewAction()\n    {\n        $result = null;\n\n        try\n        {\n            // Decoding the results, as it needs to be a json\n            $result = json_decode(\n                $this->getRequest()->getContent()\n            );\n\n            if(is_null($result))\n            {\n                throw new \\Exception('');\n            }\n        }\n        catch (\\Exception $e)\n        {\n            return $this->_error(\n                '500',\n                'internal server error'\n            );\n        }\n\n        $res_contract= $result->contract;\n\n        // Loading model to transform them from  client data to thrift models\n        $contract = $this\n             ->get('overblog.modelclient.factory')\n             ->create('Contract')\n             ->load((array)$res_contract)\n             ->asThrift();\n\n        $profile = $this\n            ->get('overblog.modelclient.factory')\n            ->create('ContractProfile')\n            ->load((array)$res_contract->profile)\n            ->asThrift();\n\n        $legal = $this\n            ->get('overblog.modelclient.factory')\n            ->create('ContractProfile')\n            ->load((array)$res_contract->legal)\n            ->asThrift();\n\n        $blog = (Object)[\n            \"main_host\" => $result->main_host,\n        ];\n\n        $contractType = $this->_getContratType($profile);\n\n        $render = $this->render(\n            'OverblogAdminFrontBundle:Contracts:contract_'. $result->lang .'_'\n                . $contractType .'.html.twig',\n                [\n                    'pda'                 => $contract,\n                    'profile'             =>\n                        $this->_getRightProfile(\n                            (Object)[\n                                'profile' => $profile,\n                                'legal'   => $legal\n                            ]\n                        ),\n                    'legalRepresentative' => $legal,\n                    'blog'                => $blog,\n                    'dateFormat'          => $this->_getDateFormat($result->lang)\n                ]\n            )->getContent();\n\n        $response = new JsonRPCResponse();\n        $response->setResults([\n            'results' => $render\n        ]);\n        return $response;\n    }\n\n    private function _getPda($id)\n    {\n        return $this->get('overblog.modelclient.factory')\n                    ->get('Contract', $id);\n    }\n\n    private function _getProfile($id)\n    {\n        return $this->get('overblog.modelclient.factory')\n                    ->get('ContractUserProfile', $id);\n    }\n\n    private function _getBlog($id)\n    {\n        return $this->get('overblog.modelclient.factory')\n                    ->get('Blog', $id);\n    }\n\n    private function _getRightProfile($pr)\n    {\n        $profile = $pr->profile;\n        $diff = null;\n\n        if(isset($pr->profile->birth_date))\n        {\n            $dt = new \\DateTime($pr->profile->birth_date);\n            $diff = $dt->diff(new \\DateTime())->y;\n        }\n\n        // If physical person has legal representative we use the legal representative\n        if('person' == $pr->profile->_class\n            && isset($pr->legal)\n            && 'person' == $pr->legal->_class\n            && isset($diff) && $diff < 18)\n        {\n            $profile = $pr->legal;\n        }\n\n        return $profile;\n    }\n\n    private function _getContratType($pr)\n    {\n        $contractType = self::CONTRACT_AUTHOR;\n        if('person' != $pr->_class)\n        {\n            $contractType = self::CONTRACT_PARTNER;\n        }\n\n        return $contractType;\n    }\n\n    private function _getLang($blog)\n    {\n        // Get the user lang\n        $lang = $blog->asObject()->lang;\n        // For an unknown reason the user lang is empty.\n        if(is_null($lang) || '' == $lang)\n        {\n            // we set it to English version\n            $lang = self::DEFAULT_LANG;\n        }\n\n        return mb_strtolower($lang);\n    }\n\n    private function _getDateFormat($lang)\n    {\n        $this->get('translator')->setLocale($lang);\n        return $this->get('translator')\n                    ->trans('DATE.FORMAT.DATE');\n    }\n}","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":424},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Volumes/overblog/public_html/OverblogAdmin/src/OverblogAdmin/FrontBundle/Controller/ContractController.php","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d20d41184b51eab1a2c7f8e2254af49f7690f609","deserializer":"TextBuffer"},{"text":"/**\n * RevenuessummaryView view\n * @module ob/views/revenuessummary\n * @requires ys/view,\n * ob/views/revenues/models/summary,\n * ob/views/revenuessummary/models/bills,\n * ob/views/revenuessummary/subviews/summary,\n * ob/views/revenuessummary/subviews/details,\n * ob/views/revenuessummary/subviews/global,\n * ob/views/revenuessummary/subviews/bills\n */\nvar\n\nNS = 'ob',\nRevenuessummaryView,\n\nYOR = Y.ob.revenues,\n\nCLASS_SUMMARY = {$classname:'summary'},\nCLASS_DETAILS = {$classname:'details'},\nCLASS_GLOBAL = {$classname:'global'},\nCLASS_BILLS = {$classname:'bills'},\nCLASS_WARNING_CONSOLIDATION = {$classname:'warning_consolidation'};\n\n/**\n * revenuessummary view\n * @class RevenuessummaryView\n * @namespace Y.ob\n * @constructor\n */\nY.namespace(NS).RevenuessummaryView =\nRevenuessummaryView =\nY.Base.create('RevenuessummaryView', Y.ys.View, [Y.ys.utils],\n{\n    _summaryview: null,\n    _detailsview: null,\n    _globalview: null,\n    _billsview: null,\n\n    destructor: function()\n    {\n        this._destruct([\n            this._summaryview,\n            this._detailsview,\n            this._globalview,\n            this._billsview,\n            this.get('summary')\n        ]);\n    },\n\n    _renderUI: function()\n    {\n        var container = this.get('container'),\n            user = this.get('user'),\n            blog = user.get('selectedBlog'),\n            contract = blog.get('contract');\n\n        /**\n         * Summary view\n         */\n        this._summaryview = new YOR.SummarySubview({\n            summary: this.get('summary'),\n            bills: this.get('bills'),\n            contract: contract\n        });\n\n        container.one('.'+CLASS_SUMMARY).append(\n            this._summaryview.render()\n        );\n\n        /**\n         * Graph view\n         */\n        this._detailsview = new YOR.DetailsSubview({\n            summary: this.get('summary')\n        });\n\n        container.one('.'+CLASS_DETAILS).append(\n            this._detailsview.render()\n        );\n\n        /**\n         * Global view\n         */\n        this._globalview = new YOR.GlobalSubview({\n            summary: this.get('summary')\n        });\n\n        container.one('.'+CLASS_GLOBAL).append(\n            this._globalview.render()\n        );\n\n        /**\n         * Bills view\n         */\n        this._billsview = new YOR.BillsSubview({\n            summary: this.get('summary'),\n            bills: this.get('bills')\n        });\n\n        container.one('.'+CLASS_BILLS).append(\n            this._billsview.render()\n        );\n\n        this._loadData();\n    },\n    \n    _bindUI: function()\n    {\n        this.storeEvent([\n                         \n            this.get('user').after(\n                'selectedBlogChange',\n                function(e)\n                {\n                    this.get('summary').set(\n                        'id_blog', \n                        e.newVal.get('id_blog')\n                    );\n                },\n                this\n            ),\n            \n            this.get('summary').after(\n                'id_blogChange',\n                this._loadData,\n                this\n            ),\n\n            this.get('summary').after(\n                'sync:read',\n                this.syncUI,\n                this\n            ),\n\n            this.get('bills').after(\n                'add',\n                this._scrollToBills,\n                this\n            )\n        ]);\n    },\n\n    _syncUI: function()\n    {\n        var summary = this.get('summary'),\n            user = this.get('user'),\n            blog = user.get('selectedBlog'),\n            contract = blog.get('contract');\n\n        /**\n         * Populate bills\n         */\n        this.get('bills').reset(\n            summary.get('bills.bills')\n        );\n\n        /**\n         * Set summary subview data\n         */\n        this._summaryview.setAttrs({\n            summary_yesterday: summary.get('summary.yesterday'),\n            summary_current_month: summary.get('summary.current_month'),\n            summary_last_bill: summary.get('summary.last_bill'),\n            summary_balance: summary.get('summary.balance')\n        });\n        this._summaryview.syncUI();\n\n        /**\n         * Set details subview data\n         */\n        this._detailsview.setAttrs({\n            id_blog: blog.get('id_blog'),\n            started_at: contract.get('created_at')\n        }, {\n            silent: true\n        });\n        this._detailsview.get('stats').set('data', summary.get('graph'));\n\n        /**\n         * Set global subview data\n         */\n        this._globalview.setAttrs({\n            total_raw: summary.get('global.total_raw'),\n            total_invoice: summary.get('global.total_invoice'),\n            total_taxable: summary.get('global.total_taxable'),\n        });\n        \n        /**\n         * Set bills subview data\n         */\n        this._billsview.set('id_blog', blog.get('id_blog'));\n        this._billsview.set(\n            'max_bills',\n            summary.get('bills.nb')\n        );\n\n        /**\n         * Show warning message about consolidation if date is first and\n         * second of the month\n         */\n        if (YUI().Array.indexOf([1,2], new Date().getDate()) === -1)\n        {\n            this.get('container').one('.'+CLASS_WARNING_CONSOLIDATION).hide();\n        }\n    },\n\n    _loadData: function()\n    {\n        this.get('summary').load();\n    },\n\n    _scrollToBills: function()\n    {\n        (new Y.Anim({\n            node: Y.one(window),\n            to: {\n                scroll: [0, this._billsview.get('container').get('region').top]\n            },\n            duration: 0.5,\n            easing: Y.Easing.easeOut\n        })).run();\n    }\n},\n{\n    ATTRS: {\n        template: {\n            value: {$revenuessummary.tpl}\n        },\n        compile_params: {\n            getter: function()\n            {\n                return {\n                    class_summary: CLASS_SUMMARY,\n                    class_details: CLASS_DETAILS,\n                    class_global: CLASS_GLOBAL,\n                    class_bills: CLASS_BILLS,\n                    class_warning_consolidation: CLASS_WARNING_CONSOLIDATION\n                };\n            }\n        },\n\n        summary: {\n            valueFn: function()\n            {\n                var user = this.get('user'),\n                    id_blog = user.get('id_blog'),\n                    r = new Y.ob.revenues.SummaryModel({\n                        id_blog: id_blog\n                    });\n\n                return r;\n            }\n        },\n\n        bills: {\n            valueFn: function()\n            {\n                var b = new Y.ob.revenues.BillsListModel({\n                    id_blog: this.get('id_blog')\n                });\n\n                return b;\n            }\n        }\n    }\n});\n","markers":{"markers":{"1":{"id":1,"range":[[14,20],[14,20]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":476,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/revenuessummary.view.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2f354b0fa11d2a7f9089e948886700b24da4d147","deserializer":"TextBuffer"},{"text":"/**\n * SummarySubview view\n * @module ob/views/revenuessummary/subviews/summary\n * @requires ys/view,\n * ob/views/main/class/format,\n * ob/plugins/forms/widgets/button,\n * ob/plugins/popin,\n * ob/views/revenuessummary/subviews/paymepopin,\n * ob/views/revenues/models/contract\n */\nvar\n\nNS = 'ob.revenues',\nSummarySubview,\n\nButtonWidget = Y.ob.plugins.forms.ButtonWidget,\n\nCLASS_SUMMARY_YESTERDAY = {$classname:'summary_yesterday'},\nCLASS_SUMMARY_CURRENTMONTH = {$classname:'summary_currentmonth'},\nCLASS_SUMMARY_LASTBILL = {$classname:'summary_lastbill'},\nCLASS_SUMMARY_BALANCE = {$classname:'summary_balance'},\nCLASS_PAYME = {$classname:'summary_payme'},\nCLASS_PAYMEBTN = {$classname:'summary_paymebtn'},\nCLASS_PAYME_DESCRIPTION = {$classname:'summary_payme_description'},\nCLASS_PAYME_SIGN_CONTRACT = {$classname:'summary_sign_contract'},\n\nMIN_BALANCE = 50.00;\n\n/**\n * summary view\n * @class SummarySubview\n * @namespace Y.ob\n * @constructor\n */\nY.namespace(NS).SummarySubview =\nSummarySubview =\nY.Base.create('SummarySubview', Y.ys.View, [Y.ys.utils, Y.ob.Format],\n{\n    _payme: null,\n    _popin: null,\n    _popinsubview: null,\n\n    destructor: function()\n    {\n        this._destruct([\n            this._payme,\n            this._popin,\n            this._popinsubview\n        ]);\n    },\n\n    _renderUI: function()\n    {\n        var container = this.get('container');\n\n        this._payme = new ButtonWidget({\n            label: {\n                i18n: 'revenues~label.payme'\n            },\n            primary: true\n        });\n        this._payme.render(\n            container.one('.'+CLASS_PAYMEBTN)\n        );\n    },\n\n    _bindUI: function()\n    {\n        this.storeEvent([\n            this._payme.on(\n                'click',\n                this._paymenow,\n                this\n            ),\n\n            this.after(\n                ['summary_yesterdayChange', 'summary_current_monthChange',\n                 'summary_last_billChange', 'summary_balanceChange'],\n                this.syncUI,\n                this\n            )\n        ]);\n    },\n\n    _syncUI: function()\n    {\n        this._syncSummaryValues();\n    },\n\n    _syncSummaryValues: function()\n    {\n        var container = this.get('container'),\n            payme     = container.one('.' + CLASS_PAYME),\n            valid     = this.get('contract').get('status')\n                            === Y.ob.revenues.ContractModel.STATUS_VALID;\n\n        /**\n         * Update amount display\n         */\n        Y.each(\n            [{\n                node: CLASS_SUMMARY_YESTERDAY,\n                attribute: 'summary_yesterday'\n            },\n            {\n                node: CLASS_SUMMARY_CURRENTMONTH,\n                attribute: 'summary_current_month'\n            },\n            {\n                node: CLASS_SUMMARY_LASTBILL,\n                attribute: 'summary_last_bill'\n            },\n            {\n                node: CLASS_SUMMARY_BALANCE,\n                attribute: 'summary_balance'\n            }],\n            function(c)\n            {\n                var val = this.get(c.attribute);\n\n                if (!Y.Lang.isUndefined(val))\n                {\n                    val = __(\n                            'formats~price.EUR',\n                            {\n                                amount: this.formatNumber(val)\n                            }\n                        ).get('innerHTML');\n                }\n                else\n                {\n                    val = '-';\n                }\n\n                container.one('.'+c.node+' .value').set(\n                    'innerHTML',\n                    val\n                );\n            },\n            this\n        );\n\n        /**\n         * Update payme button state, the contract has to be valid\n         */\n        if (this.get('summary_balance') > MIN_BALANCE && valid)\n        {\n            this._payme.set('disabled', false);\n            payme.removeClass('disabled');\n\n        }\n        else\n        {\n            this._payme.set('disabled', true);\n            payme.addClass('disabled');\n        }\n\n        container.one('.' + CLASS_PAYME_SIGN_CONTRACT)[\n            valid ? 'hide' : 'show'\n        ]();\n    },\n\n    /**\n     * Display the popin to submit a new bill\n     * @method _paymenow\n     * @private\n     */\n    _paymenow: function()\n    {\n        /**\n         * If the balance does not reach the min, don't do anything\n         */\n        if (!this.get('summary_balance') > MIN_BALANCE) return;\n\n        if (!this._popin)\n        {\n            /**\n             * Instanciate the popin content subview by passing the paypal\n             * email from the contract model\n             */\n            this._popinsubview = new Y.ob.revenues.PaymepopinSubview({\n                amount: this.get('summary_balance'),\n                email: this.get('contract').get('paypal')\n            });\n\n            /**\n             * Instanciate the popin\n             */\n            this._popin = new Y.ob.plugins.Popin({\n                headerContent: {\n                    i18n: 'revenues~title.paymenow'\n                },\n                bodyContent: this._popinsubview.render(),\n                centered: true,\n                modal: true,\n                render: true,\n                visible: false,\n                width: 600,\n                zIndex: 99999,\n                buttons: [{\n                    value: {\n                        i18n: 'main~label.cancel'\n                    },\n                    section: Y.WidgetStdMod.FOOTER,\n                    action: function()\n                    {\n                        this.hide();\n                    }\n                }, {\n                    value: {\n                        i18n: 'main~label.submit'\n                    },\n                    isDefault: true,\n                    section: Y.WidgetStdMod.FOOTER,\n                    action: Y.bind(\n                        /**\n                         * When submitting the popin, call the checkEmail\n                         * method from the subview which return true if typed\n                         * email is same as the contract's one. Then, call the\n                         * _createBill method with a callback which close the\n                         * popin\n                         */\n                        function(e)\n                        {\n                            if (this._popinsubview.checkEmail())\n                            {\n                                this._togglePopinButtonLoading(true);\n\n                                this._createBill(Y.bind(function()\n                                {\n                                    this._togglePopinButtonLoading(false);\n                                    this._popin.hide();\n                                }, this));\n                            }\n                        },\n                        this\n                    )\n                }]\n            });\n        }\n        this._popin.show();\n        this._popinsubview.focus();\n    },\n\n    /**\n     * Create the bill\n     * @method _createBill\n     * @private\n     */\n    _createBill: function(callback)\n    {\n        var bill = new Y.ob.revenues.BillModel({\n            id_blog: this.get('summary').get('id_blog')\n        });\n\n        bill.after(\n            'sync:create',\n            Y.bind(function(e)\n            {\n                this.get('bills').add(bill);\n                this.set('summary_balance', 0);\n                this.set('summary_last_bill', bill.get('amount'));\n\n                callback && callback();\n\n            }, this)\n        );\n\n        bill.save();\n    },\n\n    _togglePopinButtonLoading: function(loading)\n    {\n        var b = this._popin._defaultButton;\n\n        if (loading)\n        {\n            b.setStyle('width', b.get('region').width+'px');\n            b.addClass('loading');\n        }\n        else\n        {\n            b.setStyle('width', 'auto');\n            b.removeClass('loading');\n        }\n    }\n},\n{\n    ATTRS: {\n\n        template: {\n            value: {$summary.tpl}\n        },\n        compile_params: {\n            getter: function()\n            {\n                return {\n                    class_summary_yesterday: CLASS_SUMMARY_YESTERDAY,\n                    class_summary_currentmonth: CLASS_SUMMARY_CURRENTMONTH,\n                    class_summary_lastbill: CLASS_SUMMARY_LASTBILL,\n                    class_summary_balance: CLASS_SUMMARY_BALANCE,\n                    class_payme: CLASS_PAYME,\n                    class_paymebtn: CLASS_PAYMEBTN,\n                    class_paymebtn_description: CLASS_PAYME_DESCRIPTION,\n                    class_sign_contract: CLASS_PAYME_SIGN_CONTRACT\n                };\n            }\n        },\n\n        summary_yesterday: {\n\n        },\n        summary_current_month: {\n\n        },\n        summary_last_bill: {\n\n        },\n        summary_balance: {\n\n        },\n\n        bills: {},\n        contract: {}\n    }\n});\n","markers":{"markers":{"1":{"id":1,"range":[[26,15],[26,15]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":493,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[26,15],[26,15]]},"newParams":{"reversed":true,"range":[[26,14],[26,15]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,14],[26,15]],"newRange":[[26,14],[26,14]],"oldText":"1","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,14],[26,14]],"newRange":[[26,14],[26,15]],"oldText":"","newText":"5","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[289,0],[289,8]],"newRange":[[289,0],[289,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[262,0],[262,16]],"newRange":[[262,0],[262,0]],"oldText":"                ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[227,0],[227,32]],"newRange":[[227,0],[227,0]],"oldText":"                                ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[173,0],[173,8]],"newRange":[[173,0],[173,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[157,55],[157,56]],"newRange":[[157,55],[157,55]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[156,0],[156,8]],"newRange":[[156,0],[156,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[149,0],[149,12]],"newRange":[[149,0],[149,0]],"oldText":"            ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[123,48],[123,49]],"newRange":[[123,48],[123,48]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[93,58],[93,59]],"newRange":[[93,58],[93,58]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[76,74],[76,75]],"newRange":[[76,74],[76,74]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/summary.subview.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"666612330ce5bf528c36480a7477c146083f1f40","deserializer":"TextBuffer"},{"text":"/**\n * BillsSubview view\n * @module ob/views/revenuessummary/subviews/bills\n * @requires ys/view,\n * ob/views/revenuessummary/subviews/billline\n */\nvar\n\nNS = 'ob.revenues',\nBillsSubview,\n\nCLASS_NOBILL = {$classname:'nobill'},\nCLASS_BILLS_CTN = {$classname:'bills_ctn'},\nCLASS_LIST = {$classname:'list'},\nCLASS_PAGINATION = {$classname:'pagination'},\n\nPER_PAGE = 10;\n\n/**\n * bills view\n * @class BillsSubview\n * @namespace Y.ob\n * @constructor\n */\nY.namespace(NS).BillsSubview =\nBillsSubview =\nY.Base.create('BillsSubview', Y.ys.View, [Y.ys.utils],\n{\n    _billslinesviews: null,\n\n    initializer: function()\n    {\n        this.constructor.superclass.initializer.apply(this, arguments);\n\n        this._billslinesviews = [];\n    },\n\n    destructor: function()\n    {\n        this._destruct([\n            this.get('bills'),\n            this._billslinesviews\n        ]);\n    },\n\n    _bindUI: function()\n    {\n        var container = this.get('container');\n\n        this.storeEvent([\n\n            this.after(\n                'id_blogChange',\n                function(e)\n                {\n                    this.get('bills').set('id_blog', e.newVal);\n                },\n                this\n            ),\n\n            this.get('bills').after(\n                ['reset', 'add'],\n                function()\n                {\n                    this.get('bills').set('page', 1);\n                    this.syncUI();\n                },\n                this\n            )\n        ]);\n    },\n\n    _syncUI: function()\n    {\n        var bills = this.get('bills'),\n            container = this.get('container')\n            nobill = container.one('.'+CLASS_NOBILL),\n            billsctn = container.one('.'+CLASS_BILLS_CTN);\n\n        if (!bills.size())\n        {\n            nobill.show();\n            billsctn.hide();\n            return;\n        }\n\n        nobill.hide();\n        billsctn.show();\n\n        this._syncBillsLines();\n\n        this._syncPagination();\n    },\n\n    /**\n     * Sync bill lines subview\n     * @method _syncBillsLines\n     * @private\n     */\n    _syncBillsLines: function()\n    {\n        var container = this.get('container'),\n            list = container.one('.'+CLASS_LIST);\n\n        Y.each(\n            this._billslinesviews,\n            function(v)\n            {\n                v.destroy();\n            }\n        );\n\n        this.get('bills').each(\n            function(bill)\n            {\n                var view = new Y.ob.revenues.BilllineSubview({\n                    bill: bill\n                });\n\n                list.append(\n                    view.render()\n                );\n                this._billslinesviews.push(view);\n            },\n            this\n        );\n    },\n\n    /**\n     * Sync pagination\n     * @method _syncPagination\n     * @private\n     */\n    _syncPagination: function()\n    {\n        var container = this.get('container'),\n            node = container.one('.'+CLASS_PAGINATION),\n            max_bills = this.get('max_bills'),\n            pages = max_bills / PER_PAGE;\n\n        node.set('innerHTML', '');\n\n        for (var i = 1, len = pages+1; i < len; i++)\n        {\n            node.append(\n                Y.bind(\n                    function(page)\n                    {\n                        var n,\n                            bills = this.get('bills');;\n\n                        if (page === bills.get('page'))\n                        {\n                            n = Y.Node.create('<span>'+page+'</span>')\n                        }\n                        else\n                        {\n                            n = Y.Node.create('<a href=\"#\">'+page+'</a>')\n                            n.on(\n                                'click',\n                                function(e, page)\n                                {\n                                    e.preventDefault();\n\n                                    bills.set(\n                                        'page',\n                                        page\n                                    );\n                                    bills.load();\n                                },\n                                this,\n                                page\n                            );\n                        }\n\n                        return n;\n                    },\n                    this\n                )(i)\n            );\n\n            if (i < pages)\n            {\n                node.append('&nbsp;-&nbsp;');\n            }\n        }\n    }\n},\n{\n    ATTRS: {\n        template: {\n            value: {$bills.tpl}\n        },\n        compile_params: {\n            getter: function()\n            {\n                return {\n                    class_nobill: CLASS_NOBILL,\n                    class_bills_ctn: CLASS_BILLS_CTN,\n                    class_list: CLASS_LIST,\n                    class_pagination: CLASS_PAGINATION\n                };\n            }\n        },\n        id_blog: {\n            broacast: 1\n        },\n        bills: {\n\n        },\n        max_bills: {\n            setter: function(v)\n            {\n                return Math.max(1, +v);\n            }\n        }\n    }\n});\n","markers":{"markers":{"1":{"id":1,"range":[[23,3],[23,3]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":505,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/bills.subview.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ccf62efce71c25d327b8f1235680be1876284e7c","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":424,"softTabs":true,"displayBuffer":{"id":425,"softWrap":false,"editorWidthInChars":null,"scrollTop":816,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Volumes/overblog/public_html/OverblogAdmin/src/OverblogAdmin/FrontBundle/Controller/ContractController.php","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":476,"softTabs":true,"displayBuffer":{"id":477,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/revenuessummary.view.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":505,"softTabs":true,"displayBuffer":{"id":506,"softWrap":false,"editorWidthInChars":null,"scrollTop":252,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/bills.subview.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":493,"softTabs":true,"displayBuffer":{"id":494,"softWrap":false,"editorWidthInChars":null,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/summary.subview.js","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/bills.subview.js","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-php","language-html","language-javascript"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Volumes/overblog/public_html/OverblogAdmin/src/OverblogAdmin/FrontBundle/Controller/ContractController.php":1405438598402,"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/revenuessummary.view.js":1405438679909,"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/bills.subview.js":1405438733605,"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary/subviews/summary.subview.js":1405438707129},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":78476679},"tree-view":{"directoryExpansionStates":{"client":{"views":{"write":{"subviews":{},"templates":{}}}},"src":{"OverblogAdmin":{"FrontBundle":{"Controller":{},"Resources":{"views":{"Contracts":{}}}}}}},"selectedPath":"/Volumes/overblog/public_html/OverblogAdmin/client/views/revenuessummary","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":772,"width":200},"find-and-replace":{"viewState":{"findHistory":["10","contract","10","renderUI","renderimage","render","http","link","10","per_page"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["10"],"replaceHistory":[],"pathsHistory":["client/locales","client/views/revenues","client/views/revenuescontract","client/views/revenuessettings","client/views/revenuessummary"],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}}}}