(function() {
  var Color, strip;

  Color = require('./color-model');

  strip = require('./utils').strip;

  Color.addVariableExpression('less', '(@[a-zA-Z0-9\\-_]+)\\s*:\\s*([^;\\n]+);?');

  Color.addVariableExpression('scss', '(\\$[a-zA-Z0-9\\-_]+):\\s*(.*?)(\\s*!default)?;');

  Color.addVariableExpression('sass', '(\\$[a-zA-Z0-9\\-_]+):\\s*(.*?)(\\s*!default)?$');

  Color.addVariableExpression('stylus_hash', '([a-zA-Z_$][a-zA-Z0-9\\-_]*)\\s*=\\s*\\{([^=]*)\\}', function(match, start, end, solver) {
    var buffer, char, content, current, key, name, scope, value, _i, _len, _ref, _ref1;
    buffer = '';
    _ref = match, match = _ref[0], name = _ref[1], content = _ref[2];
    current = match.indexOf(content);
    scope = [name];
    for (_i = 0, _len = content.length; _i < _len; _i++) {
      char = content[_i];
      if (/\{/.test(char)) {
        scope.push(buffer.replace(/[\s:]/g, ''));
        buffer = '';
      } else if (/\}/.test(char)) {
        scope.pop();
        if (scope.length === 0) {
          return start + current;
        }
      } else if (/[,\n]/.test(char)) {
        buffer = strip(buffer);
        if (buffer.length) {
          _ref1 = buffer.split(/\s*:\s*/), key = _ref1[0], value = _ref1[1];
          solver.appendResult([scope.concat(key).join('.'), value, start + current - buffer.length - 1, start + current]);
        }
        buffer = '';
      } else {
        buffer += char;
      }
      current++;
    }
    return end;
  });

  Color.addVariableExpression('stylus', '([a-zA-Z_$][a-zA-Z0-9\\-_]*)\\s*=\\s*([^\\n;]*);?$');

}).call(this);
